
Administrator@GHTS-Laptop MINGW64 ~
$ git config --global user.name "Crispin Kalala"

Administrator@GHTS-Laptop MINGW64 ~
$ git config --global user.email crispinkalala@gmail.com

Administrator@GHTS-Laptop MINGW64 ~
$ cd desktop

Administrator@GHTS-Laptop MINGW64 ~/desktop
$ cd git-repository

Administrator@GHTS-Laptop MINGW64 ~/desktop/git-repository
$ git config --global core.editor "nano"

Administrator@GHTS-Laptop MINGW64 ~/desktop/git-repository
$ git config --list
core.symlinks=false
core.autocrlf=true
core.fscache=true
color.diff=auto
color.status=auto
color.branch=auto
color.interactive=true
help.format=html
rebase.autosquash=true
http.sslcainfo=C:/Program Files (x86)/Git/mingw32/ssl/certs/ca-bundle.crt
http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
http.sslbackend=openssl
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
credential.helper=manager
user.email=crispinkalala@gmail.com
user.name=Crispin Kalala
core.editor=nano

============================================================================

$ git help
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.

Administrator@GHTS-Laptop MINGW64 ~/desktop/git-repository
$ git help add


================================================================================

Some commands:
- Tracking a directory (ls, ls -a)
- Saving files to directory (git init)
- Tracking all the java files in git repository: (git add *.java)
- Tracking a single: (git add git-config.txt)
- Commit files: (git commit -m 'Initial Project Version'
- Check status: (git status)

================================= <> ==========================================

- Staging the files (git add filename)
- To see what has changed (git diff)

